//Проверить, что в массиве все элементы упорядочены по возрастанию, т.е. все пары элементов Xi и Xi+1 удовлетворяют условию Xi < Xi+1. Если есть
// пара элементов, не удовлетворяющая условию, найти её номер i.
#include <stdio.h>

int main() {
    int n;
    
    do {
    printf("Введите размер массива (n): ");
    scanf("%d", &n);
    } while (n<=0 || n>=20);

    int A[n];
    printf("Введите элементы массива:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &A[i]);
    }
    printf("Введенные элементы массива:");
    for (int i = 0; i < n; i++) {
        printf(" %d ", A[i]);
    }
    
    int flag = 1; // Флаг для отслеживания сортировки
    for (int i = 1; i < n; i++) {
        if (A[i] < A[i-1]) {
            if (flag) {
                printf("\nМассив не отсортирован\n");
                flag = 0;
            }
            printf("На позиции %d нарушение: %d\n", i, A[i]);
        }
    }

    if (flag) {
        printf("\n Массив отсортирован по возрастанию.\n");
    }
    
    return 0;
}
#include <stdio.h>

int main() {
    double **A;  
    int n;
    printf("Введите количество столбцов (n): ");
    scanf("%d", &n);

    // Выделяем память для 2 строк
    A = new double*[2];
    for (int i = 0; i < 2; i++) {
        A[i] = new double[n];  // Выделяем память для n столбцов
    }

    printf("Введите матрицу 2x%d\n", n);
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < n; j++) {
            printf("Введите элемент [%i][%i]: ", i, j);
            scanf("%lf", &A[i][j]);
        }
    }

    double *result = new double[n];  // Массив для хранения разностей
    printf("Разности элементов строк:\n");
    
    // Вычисляем разности для каждого столбца
    for (int j = 0; j < n; j++) {
        result[j] = A[0][j] - A[1][j];  // Разности элементов строк
        printf("%lf ", result[j]); // Выводим разности
    }
    printf("\n");

    // Освобождаем выделенную память
    for (int i = 0; i < 2; i++) {
        delete[] A[i];  // Удаляем строки
    }
    delete[] A;  // Удаляем массив указателей
    delete[] result;  // Удаляем массив разностей

    return 0;
} 
